{"version":3,"sources":["../../src/helpers.ts","../../src/hooks/useResponsiveSize.ts","../../src/hooks/useCanvasResolution.ts","../../src/index.tsx","../../src/hooks/useCanvasStyles.ts","../../src/hooks/useCanvasPaddings.ts","../../src/hooks/useMouseCallbacks.ts","App.tsx","index.tsx"],"names":["getPointFromCell","side","paddingSide","cellSize","Math","floor","useResponsiveSize","container","imgSize","resizeObserverRef","React","useRef","useState","size","setSize","handleResize","useCallback","clientWidth","clientHeight","width","height","aspect","useEffect","current","ResizeObserver","observe","containerSize","canvasSize","setCanvasSize","newImgHeight","isWidest","useCanvasResolution","NOOP","DEFAULT_CTX_STYLES","strokeStyle","lineDashOffset","lineDash","fillStyle","GRID_STYLES","SELECT_AREA_STYLES","CELLS_STYLES","SelectableGrid","_ref$cellSize","onMouseDown","onMouseMove","onMouseUp","gridStyles","selectAreaStyles","cellsStyles","canvasRef","canvasStyles","top","left","right","bottom","setCanvasStyles","containerWidth","offsetWidth","containerHeight","offsetHeight","canvasWidth","canvasHeight","offsetX","offsetY","useCanvasStyles","paddings","setPaddings","cellCountX","paddingTop","paddingLeft","useCanvasPaddings","isDrag","setIsDrag","startPoint","setStartPoint","x","y","w","h","area","setArea","areaInPx","setAreaInPx","areaInPercent","setAreaInPercent","pLeft","pTop","handleMouseDown","event","nativeEvent","point","handleMouseMove","min","abs","handleMouseUp","useMouseCallbacks","updateCtxStyles","ctx","ctxStyles","setLineDash","drawGrid","getContext","clearRect","beginPath","moveTo","lineTo","stroke","drawSelectArea","strokeRect","fillRect","fillCells","startX","endX","ceil","startY","countX","countY","cellX","cellY","positionX","CELL_OFFSET","positionY","ref","className","styles","style","App","containerRef","imgRef","undefined","setImgSize","src","alt","onLoad","currentTarget","naturalWidth","naturalHeight","e","downPosition","console","log","areaInfo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d15f41f1.chunk.js","sourcesContent":["export const getPointFromCell = (\n  side: number,\n  paddingSide: number,\n  cellSize: number\n) => Math.floor((side - paddingSide) / cellSize) * cellSize + paddingSide\n","import React from 'react'\n\nimport { useCanvasResolution } from './useCanvasResolution'\nimport { Size } from '../types'\n\nexport const useResponsiveSize = ({\n  container,\n  imgSize\n}: {\n  container: HTMLDivElement | null\n  imgSize?: Size\n}) => {\n  const resizeObserverRef = React.useRef<ResizeObserver>()\n  const [size, setSize] = React.useState<{\n    width: number\n    height: number\n    aspect: number\n  }>()\n\n  const handleResize = React.useCallback(() => {\n    if (!container) {\n      return\n    }\n\n    const { clientWidth, clientHeight } = container\n\n    setSize({\n      width: clientWidth,\n      height: clientHeight,\n      aspect: clientWidth / clientHeight\n    })\n  }, [container])\n\n  React.useEffect(() => {\n    if (!resizeObserverRef.current && container) {\n      resizeObserverRef.current = new ResizeObserver(handleResize)\n      resizeObserverRef.current.observe(container)\n    }\n  }, [container, handleResize])\n\n  const canvasSize = useCanvasResolution({ containerSize: size, imgSize })\n\n  return canvasSize\n}\n","import React from 'react'\n\nimport { CanvasSize, Size } from '../types'\n\n// set canvas size\nexport const useCanvasResolution = ({\n  containerSize,\n  imgSize\n}: {\n  containerSize?: Size\n  imgSize?: Size\n}) => {\n  const [canvasSize, setCanvasSize] = React.useState<CanvasSize>({\n    width: 0,\n    height: 0\n  })\n\n  React.useEffect(() => {\n    if (!containerSize || !imgSize) {\n      return\n    }\n\n    const { width, height } = containerSize\n    const { aspect } = imgSize\n\n    const newImgWidth = height * aspect\n    const newImgHeight = width / aspect\n\n    const isWidest = newImgHeight <= height\n\n    const size = {\n      width: isWidest ? width : newImgWidth,\n      height: isWidest ? newImgHeight : height\n    }\n\n    setCanvasSize(size)\n  }, [containerSize, imgSize])\n\n  return canvasSize\n}\n","import * as React from 'react'\n\nimport { getPointFromCell } from './helpers'\nimport {\n  useCanvasPaddings,\n  useCanvasStyles,\n  useMouseCallbacks,\n  useResponsiveSize\n} from './hooks'\nimport {\n  Size,\n  Point,\n  AreaInfo,\n  AreaStyles,\n  CellsStyles,\n  GridStyles,\n  CtxStyles\n} from './types'\nimport styles from './styles.module.css'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst NOOP = () => {}\n\nconst DEFAULT_CTX_STYLES: CtxStyles = {\n  strokeStyle: 'black',\n  lineDashOffset: 0,\n  lineDash: [0, 0],\n  fillStyle: 'black'\n}\n\nconst GRID_STYLES = {\n  strokeStyle: 'blue',\n  lineDashOffset: 0,\n  lineDash: [5, 5]\n}\n\nconst SELECT_AREA_STYLES = {\n  strokeStyle: 'red',\n  fillStyle: 'rgba(100,0,0,0.3)',\n  lineDash: [0, 0]\n}\n\nconst CELLS_STYLES = {\n  strokeStyle: 'red',\n  fillStyle: 'rgba(100,0,0,0.3)'\n}\ninterface Props {\n  container: HTMLDivElement | null\n  imgSize?: Size\n  cellSize?: number\n  onMouseDown?: (e: React.MouseEvent, startDownPosition: Point) => void\n  onMouseMove?: (e: React.MouseEvent, areaInfo: AreaInfo) => void\n  onMouseUp?: (e: React.MouseEvent, areaInfo: AreaInfo) => void\n  gridStyles?: GridStyles\n  selectAreaStyles?: AreaStyles\n  cellsStyles?: CellsStyles\n}\n\nconst CELL_OFFSET = 5\n\nexport const SelectableGrid = ({\n  container,\n  imgSize,\n  cellSize = 30,\n  onMouseDown = NOOP,\n  onMouseMove = NOOP,\n  onMouseUp = NOOP,\n  gridStyles = GRID_STYLES,\n  selectAreaStyles = SELECT_AREA_STYLES,\n  cellsStyles = CELLS_STYLES\n}: Props) => {\n  const canvasRef = React.useRef<HTMLCanvasElement | null>(null)\n  const canvasSize = useResponsiveSize({ container, imgSize })\n  const canvasStyles = useCanvasStyles({ container, canvasSize })\n  const paddings = useCanvasPaddings({ canvasSize, cellSize })\n  const {\n    isDrag,\n    area,\n    handleMouseDown,\n    handleMouseMove,\n    handleMouseUp,\n    startPoint\n  } = useMouseCallbacks({\n    onMouseDown,\n    onMouseMove,\n    onMouseUp,\n    canvasSize,\n    cellSize,\n    paddings\n  })\n\n  const updateCtxStyles = (\n    ctx: CanvasRenderingContext2D,\n    ctxStyles: CtxStyles = DEFAULT_CTX_STYLES\n  ) => {\n    const { fillStyle, lineDash, lineDashOffset, strokeStyle } = ctxStyles\n    ctx.fillStyle = fillStyle\n    ctx.setLineDash(lineDash)\n    ctx.lineDashOffset = lineDashOffset\n    ctx.strokeStyle = strokeStyle\n  }\n\n  const drawGrid = React.useCallback(() => {\n    if (!canvasRef.current) {\n      return\n    }\n\n    const ctx = canvasRef.current.getContext('2d')\n\n    if (!ctx) {\n      return\n    }\n\n    const { width, height } = canvasSize\n    const { top, left, right, bottom } = paddings\n\n    ctx.clearRect(0, 0, width, height)\n\n    updateCtxStyles(ctx, { ...DEFAULT_CTX_STYLES, ...gridStyles })\n\n    ctx.beginPath()\n\n    for (let x = left; x <= width - right; x += cellSize) {\n      ctx.moveTo(x, top)\n      ctx.lineTo(x, height - bottom)\n    }\n\n    for (let y = top; y <= height - bottom; y += cellSize) {\n      ctx.moveTo(left, y)\n      ctx.lineTo(width - right, y)\n    }\n\n    ctx.stroke()\n  }, [canvasSize, paddings, gridStyles, cellSize])\n\n  const drawSelectArea = React.useCallback(() => {\n    if (!canvasRef.current) {\n      return\n    }\n\n    const ctx = canvasRef.current.getContext('2d')\n\n    if (!ctx) {\n      return\n    }\n\n    updateCtxStyles(ctx, { ...DEFAULT_CTX_STYLES, ...selectAreaStyles })\n\n    const { x, y, w, h } = area\n\n    ctx.strokeRect(x, y, w, h)\n    ctx.fillRect(x, y, w, h)\n  }, [area, selectAreaStyles])\n\n  const fillCells = React.useCallback(() => {\n    if (!canvasRef.current) {\n      return\n    }\n\n    const ctx = canvasRef.current.getContext('2d')\n\n    if (!ctx) {\n      return\n    }\n\n    if (!startPoint) {\n      return\n    }\n\n    updateCtxStyles(ctx, { ...DEFAULT_CTX_STYLES, ...cellsStyles })\n\n    const { x, y, w, h } = area\n    const { top, left, right, bottom } = paddings\n    const { width, height } = canvasSize\n\n    // TODO: To think about the algorithm for shading cells\n    const startX = Math.floor((x - left) / cellSize)\n    const endX = Math.ceil((x + w - left) / cellSize)\n    const startY = Math.floor((y - top) / cellSize)\n    const endY = Math.ceil((y + h - top) / cellSize)\n\n    const countX = endX - startX\n    const countY = endY - startY\n\n    for (let cellX = 0; cellX < countX; cellX += 1) {\n      for (let cellY = 0; cellY < countY; cellY += 1) {\n        const positionX =\n          getPointFromCell(x + cellSize * cellX, left, cellSize) +\n          CELL_OFFSET / 2\n\n        const positionY =\n          getPointFromCell(y + cellSize * cellY, top, cellSize) +\n          CELL_OFFSET / 2\n\n        // TODO: change the condition\n        if (\n          positionX < left ||\n          positionX > width - right ||\n          positionY < top ||\n          positionY > height - bottom\n        ) {\n          continue\n        }\n\n        ctx.clearRect(\n          positionX,\n          positionY,\n          cellSize - CELL_OFFSET,\n          cellSize - CELL_OFFSET\n        )\n        ctx.fillRect(\n          positionX,\n          positionY,\n          cellSize - CELL_OFFSET,\n          cellSize - CELL_OFFSET\n        )\n      }\n    }\n  }, [startPoint, cellsStyles, area, paddings, canvasSize, cellSize])\n\n  // all draws\n  React.useEffect(() => {\n    if (!canvasRef.current) {\n      return\n    }\n\n    const ctx = canvasRef.current.getContext('2d')\n\n    if (!ctx) {\n      return\n    }\n\n    ctx.clearRect(0, 0, canvasSize.width, canvasSize.height)\n\n    drawGrid()\n    fillCells()\n    if (isDrag) {\n      drawSelectArea()\n    }\n  }, [canvasSize, isDrag, drawGrid, fillCells, drawSelectArea])\n\n  if (!container || !imgSize) {\n    return null\n  }\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={styles.canvas}\n      style={{ ...canvasStyles }}\n      width={canvasSize.width}\n      height={canvasSize.height}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    />\n  )\n}\n","import React from 'react'\n\nimport { CanvasSize } from '../types'\n\n// set canvas styles\nexport const useCanvasStyles = ({\n  container,\n  canvasSize\n}: {\n  container: HTMLDivElement | null\n  canvasSize: CanvasSize\n}) => {\n  const [canvasStyles, setCanvasStyles] = React.useState({\n    top: '0',\n    left: '0',\n    right: '0',\n    bottom: '0'\n  })\n\n  React.useEffect(() => {\n    if (!container || !canvasSize.width || !canvasSize.height) {\n      return\n    }\n\n    const { offsetWidth: containerWidth, offsetHeight: containerHeight } =\n      container\n    const { width: canvasWidth, height: canvasHeight } = canvasSize\n\n    const isOffsetX = canvasWidth <= containerWidth\n    const isOffsetY = canvasHeight <= containerHeight\n\n    const offsetX = isOffsetX ? (containerWidth - canvasWidth) / 2 : 0\n    const offsetY = isOffsetY ? (containerHeight - canvasHeight) / 2 : 0\n\n    const styles = {\n      top: `${(offsetY / containerHeight) * 100}%`,\n      left: `${(offsetX / containerWidth) * 100}%`,\n      right: `${(offsetX / containerWidth) * 100}%`,\n      bottom: `${(offsetY / containerHeight) * 100}%`\n    }\n\n    setCanvasStyles(styles)\n  }, [container, canvasSize])\n\n  return canvasStyles\n}\n","import React from 'react'\n\nimport { CanvasSize, Paddings } from '../types'\n\n// set paddings for grid\nexport const useCanvasPaddings = ({\n  canvasSize,\n  cellSize\n}: {\n  canvasSize: CanvasSize\n  cellSize: number\n}) => {\n  const [paddings, setPaddings] = React.useState<Paddings>({\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  })\n\n  React.useEffect(() => {\n    const { width, height } = canvasSize\n\n    if (!width || !height) {\n      return\n    }\n\n    const cellCountX = Math.floor(width / cellSize)\n    const cellCountY = Math.floor(height / cellSize)\n\n    const paddingX = width - cellCountX * cellSize\n    const paddingY = height - cellCountY * cellSize\n\n    const paddingTop = paddingY / 2 - 0.5\n    const paddingLeft = paddingX / 2 - 0.5\n    const paddingRight = paddingLeft\n    const paddingBottom = paddingTop\n\n    setPaddings({\n      top: paddingTop,\n      left: paddingLeft,\n      right: paddingRight,\n      bottom: paddingBottom\n    })\n  }, [canvasSize, cellSize])\n\n  return paddings\n}\n","import React from 'react'\n\nimport { getPointFromCell } from '../helpers'\nimport {\n  AreaInfo,\n  AreaInPercent,\n  AreaInPx,\n  CanvasSize,\n  Paddings,\n  Point,\n  SelectableArea\n} from '../types'\n\nexport const useMouseCallbacks = ({\n  onMouseDown,\n  onMouseMove,\n  onMouseUp,\n  paddings,\n  canvasSize,\n  cellSize\n}: {\n  onMouseDown: (e: React.MouseEvent, downPosition: Point) => void\n  onMouseMove: (e: React.MouseEvent, areaInfo: AreaInfo) => void\n  onMouseUp: (e: React.MouseEvent, areaInfo: AreaInfo) => void\n  paddings: Paddings\n  canvasSize: CanvasSize\n  cellSize: number\n}) => {\n  const [isDrag, setIsDrag] = React.useState<boolean>(false)\n  const [startPoint, setStartPoint] = React.useState<Point | null>(null)\n  const [area, setArea] = React.useState<SelectableArea>({\n    x: 0,\n    y: 0,\n    w: 0,\n    h: 0\n  })\n  const [areaInPx, setAreaInPx] = React.useState<AreaInPx>({\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  })\n\n  const [areaInPercent, setAreaInPercent] = React.useState<AreaInPercent>({\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  })\n\n  // calculate selected area in px and percent\n  React.useEffect(() => {\n    const { x, y, w, h } = area\n    const { left: pLeft, top: pTop } = paddings\n    const { width, height } = canvasSize\n\n    const left = getPointFromCell(x, pLeft, cellSize)\n    const top = getPointFromCell(y, pTop, cellSize)\n    const right = getPointFromCell(x + w, pLeft, cellSize) + cellSize\n    const bottom = getPointFromCell(y + h, pTop, cellSize) + cellSize\n\n    setAreaInPx({ top, left, right, bottom })\n    setAreaInPercent({\n      top: top / height,\n      left: left / width,\n      right: right / width,\n      bottom: bottom / height\n    })\n  }, [area, paddings, canvasSize, cellSize])\n\n  // reset selectable area when canvas changing own sizes\n  React.useEffect(() => {\n    setIsDrag(false)\n    setStartPoint(null)\n  }, [canvasSize])\n\n  const handleMouseDown = (event: React.MouseEvent) => {\n    const {\n      nativeEvent: { offsetX, offsetY }\n    } = event\n\n    const point = { x: offsetX, y: offsetY }\n\n    setIsDrag(true)\n    setStartPoint(point)\n    setArea({ ...point, w: 0, h: 0 })\n    onMouseDown(event, point)\n  }\n\n  const handleMouseUp = (event: React.MouseEvent) => {\n    setIsDrag(false)\n    onMouseUp(event, { area, areaInPx, areaInPercent })\n  }\n\n  const handleMouseMove = (event: React.MouseEvent) => {\n    const {\n      nativeEvent: { offsetX, offsetY }\n    } = event\n\n    if (!isDrag) {\n      return\n    }\n\n    if (!startPoint) {\n      return\n    }\n\n    const area = {\n      x: Math.min(offsetX, startPoint.x),\n      y: Math.min(offsetY, startPoint.y),\n      w: Math.abs(offsetX - startPoint.x),\n      h: Math.abs(offsetY - startPoint.y)\n    }\n\n    setArea(area)\n\n    onMouseMove(event, { area, areaInPx, areaInPercent })\n  }\n\n  return {\n    isDrag,\n    area,\n    startPoint,\n    handleMouseDown,\n    handleMouseMove,\n    handleMouseUp\n  }\n}\n","import React, { useRef, useState } from 'react'\n\nimport { SelectableGrid } from 'selectable-grid'\nimport 'selectable-grid/dist/index.css'\nimport { Point, AreaInfo, Size } from '../../dist/types'\n\nconst App = () => {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const imgRef = useRef<HTMLImageElement>(null)\n  const [imgSize, setImgSize] = useState<Size | undefined>(undefined)\n\n  const handleLoad = ({\n    currentTarget: { naturalWidth, naturalHeight }\n  }: React.SyntheticEvent<HTMLImageElement>) => {\n    setImgSize({\n      width: naturalWidth,\n      height: naturalHeight,\n      aspect: naturalWidth / naturalHeight\n    })\n  }\n\n  return (\n    <div ref={containerRef} className='container'>\n      <img\n        className='img'\n        ref={imgRef}\n        src='https://all-t-shirts.ru/goods_images/ru110593II00039d6336575d4ab6f3960422a337e0e78.jpg'\n        alt=''\n        onLoad={handleLoad}\n      />\n\n      <SelectableGrid\n        container={containerRef.current}\n        imgSize={imgSize}\n        onMouseDown={(e: React.MouseEvent, downPosition: Point) => {\n          console.log('event => ', e)\n          console.log('downPosition => ', downPosition)\n        }}\n        onMouseMove={(e: React.MouseEvent, areaInfo: AreaInfo) => {\n          console.log('event => ', e)\n          console.log('🚀 ~ areaInfo', areaInfo)\n        }}\n        onMouseUp={(e: React.MouseEvent, areaInfo: AreaInfo) => {\n          console.log('event => ', e)\n          console.log('🚀 ~ areaInfo', areaInfo)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}